/**
 * 
 * This file is part of the AircraftSimulator Project, written as 
 * part of the assessment for CAB302, semester 1, 2016. 
 * 
 */
package asgn2Simulators;

import java.awt.BorderLayout;
import java.awt.Label;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

import org.jfree.ui.RefineryUtilities;

import asgn2Simulators.Log;
import asgn2Simulators.Chart;
import asgn2Simulators.Chart2;
import asgn2Aircraft.AircraftException;
import asgn2Passengers.PassengerException;


import javax.swing.BorderFactory;
import javax.swing.JOptionPane;


import asgn2Simulators.GUISimulator;

/**
 * @author hogan
 *
 */
@SuppressWarnings("serial")
public class GUISimulator extends JFrame implements ActionListener, Runnable {
	private static final long serialVersionUID = -7031008862559936404L;
	public static final int WIDTH = 800;
	public static final int HEIGHT = 925;
	

	private JPanel pnlOne;
	private JPanel pnlTwo;
	private JPanel pnlFour;
	private JPanel pnlFive;
	
	private JTextArea ta = new JTextArea("");
	private JTextArea rngInput = new JTextArea("100");
	private JTextArea dailyInput = new JTextArea("500");
	private JTextArea queueInput, cancelInput, firstInput, businessInput, premiumInput, economyInput;
	
	private JLabel simHead, fareHead, opHead, rngLabel, dailyLabel, queueLabel, cancelLabel, firstLabel, businessLabel, premiumLabel, economyLabel;
	
	private JButton btnRunSim;
	private JButton btnShowChart;
	private JButton btnShowLogs;

	private JPanel pnlBtn;
	
	/**
	 * @param arg0
	 * @throws HeadlessException
	 */
	public GUISimulator(String arg0) throws HeadlessException {
		super(arg0);
	}
	
	private double parseInt(String str){
		double x = Double.parseDouble(str);
		return x;
	}
	
	private void createGUI() {
		setSize(WIDTH, HEIGHT);
	    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    setLayout(new BorderLayout());
	    
	    
	    pnlOne = createPanel(Color.WHITE);
	    pnlTwo = createPanel(Color.LIGHT_GRAY);
	    pnlBtn = createPanel(Color.LIGHT_GRAY);
	    pnlFour = createPanel(Color.LIGHT_GRAY);
	    pnlFive = createPanel(Color.LIGHT_GRAY);
	    
	    simHead = createHeading("Simulation");
	    fareHead = createHeading("Fare Classes");
	    opHead = createHeading("Operation");
	    
	    rngLabel = createLabel("RNG Seed:");
	    dailyLabel = createLabel("Daily Mean:");
	    queueLabel = createLabel("Queue Size:");
	    cancelLabel = createLabel("Cancellation:");
	    firstLabel = createLabel("First:");
	    businessLabel = createLabel("Business:");
	    premiumLabel = createLabel("Premium:");
	    economyLabel = createLabel("Economy:");
	    
	    
	    rngInput = createInput("100");
	    dailyInput = createInput("1300");
	    queueInput = createInput("500");
	    cancelInput = createInput("0.1");
	    firstInput = createInput("0.03");
	    businessInput = createInput("0.14");
	    premiumInput = createInput("0.13");
	    economyInput = createInput("0.70");
	    
	    btnRunSim = createButton("Run Simulation");
	    btnShowChart = createButton("Show Chart");
	    btnShowLogs = createButton("Show Logs");

	    
	    layoutButtonPanel(); 
	    
	    this.getContentPane().add(pnlOne,BorderLayout.CENTER);
	    this.getContentPane().add(pnlTwo,BorderLayout.NORTH);
	    this.getContentPane().add(pnlBtn,BorderLayout.SOUTH);
	    this.getContentPane().add(pnlFour,BorderLayout.EAST);
	    this.getContentPane().add(pnlFive,BorderLayout.WEST);
	    repaint(); 
	    this.setVisible(true);
	}
	
	
	private JPanel createPanel(Color c) {
		JPanel jp = new JPanel();
		jp.setBackground(c);
		return jp;
	}
	

	
	private JButton createButton(String str) {
		JButton jb = new JButton(str); 
		jb.addActionListener((ActionListener) this);
		return jb; 
	}
	
	private JLabel createHeading(String str){
		JLabel jl = new JLabel(str); 
		jl.setFont(new Font("Courier New", Font.BOLD, 20));
		return jl;
	}
	
	private JLabel createLabel(String str){
		JLabel jl = new JLabel(str); 
		jl.setFont(new Font("Calibri", Font.PLAIN, 15));
		return jl;
	}

	private JTextArea createInput(String str){
		JTextArea jt = new JTextArea(str); 
		jt.setColumns(10);
		return jt;
	}
	
	private void layoutButtonPanel() {
		GridBagLayout layout = new GridBagLayout();
	    pnlBtn.setLayout(layout);
	    
	    //add components to grid
	    GridBagConstraints constraints = new GridBagConstraints(); 
	    
	    //Defaults
	    constraints.fill = GridBagConstraints.NONE;
	    constraints.anchor = GridBagConstraints.CENTER;
	    constraints.weightx = 100;
	    constraints.weighty = 100;
	    addToPanel(pnlBtn, simHead,constraints,2,0,2,1);
	    addToPanel(pnlBtn, fareHead,constraints,5,0,2,1);
	    addToPanel(pnlBtn, opHead,constraints,9,0,2,1);
	    
	    addToPanel(pnlBtn, rngLabel,constraints,1,1,2,1);
	    addToPanel(pnlBtn, dailyLabel,constraints,1,2,2,1);
	    addToPanel(pnlBtn, queueLabel,constraints,1,3,2,1);
	    addToPanel(pnlBtn, cancelLabel,constraints,1,4,2,1);
	    addToPanel(pnlBtn, firstLabel,constraints,4,1,2,1);
	    addToPanel(pnlBtn, businessLabel,constraints,4,2,2,1);
	    addToPanel(pnlBtn, premiumLabel,constraints,4,3,2,1);
	    addToPanel(pnlBtn, economyLabel,constraints,4,4,2,1);
	    
	    addToPanel(pnlBtn, rngInput,constraints,3,1,2,1);
	    addToPanel(pnlBtn, dailyInput,constraints,3,2,2,1);
	    addToPanel(pnlBtn, queueInput,constraints,3,3,2,1);
	    addToPanel(pnlBtn, cancelInput,constraints,3,4,2,1);
	    addToPanel(pnlBtn, firstInput,constraints,6,1,2,1);
	    addToPanel(pnlBtn, businessInput,constraints,6,2,2,1);
	    addToPanel(pnlBtn, premiumInput,constraints,6,3,2,1);
	    addToPanel(pnlBtn, economyInput,constraints,6,4,2,1);
	    
	    addToPanel(pnlBtn, btnRunSim,constraints,9,2,2,1); 
	    addToPanel(pnlBtn, btnShowChart,constraints,9,3,2,1); 
	    addToPanel(pnlBtn, btnShowLogs,constraints,9,4,2,1); 
	}
	
	/**
     * 
     * A convenience method to add a component to given grid bag
     * layout locations. Code due to Cay Horstmann 
     *
     * @param c the component to add
     * @param constraints the grid bag constraints to use
     * @param x the x grid position
     * @param y the y grid position
     * @param w the grid width
     * @param h the grid height
     */
   private void addToPanel(JPanel jp,Component c, GridBagConstraints constraints, int x, int y, int w, int h) {  
      constraints.gridx = x;
      constraints.gridy = y;
      constraints.gridwidth = w;
      constraints.gridheight = h;
      jp.add(c, constraints);
   }

	
	/* (non-Javadoc)
	 * @see java.lang.Runnable#run()
	 */
	@Override
	public void run() {
		createGUI(); 
	}

	/* (non-Javadoc)
	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */

	
	public void actionPerformed(ActionEvent e) {
		//Get event source 
		Object src=e.getSource(); 
		
		if (src== btnRunSim) {
			try {
				RunGUI();
			} catch (IOException | SimulationException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		} else if (src==btnShowChart) {
			Simulator s = createSimulatorUsingArgsGUI(args);
			Log l = new Log();
		    SimulationRunner sr = new SimulationRunner(s,l);
			sr.runSimulation();
			drawChart(sr);
			  
		} else if (src==btnShowLogs) {
			JOptionPane.showMessageDialog(this,"A Warning Message");
		}	
	}
	
	public void stringPrinter (String str) {
		ta.append(str);
		
	}
	
	public void RunGUI() throws IOException, SimulationException {
		double mean = 0.33*parseInt(dailyInput.getText());
		String meanSD = Double.toString(mean);
		String [] args = {rngInput.getText(),queueInput.getText(),dailyInput.getText(),meanSD,firstInput.getText(),businessInput.getText(),premiumInput.getText(),economyInput.getText(),cancelInput.getText()};
		
		try {
			Simulator s = createSimulatorUsingArgsGUI(args);
			Log l = new Log();
			SimulationRunner sr = new SimulationRunner(s,l);
			sr.runSimulation();
			//String content;

			//content = new String(Files.readAllBytes(Paths.get()));
		   // JTextArea ta = new JTextArea();
		    pnlOne.add(ta);
		    revalidate();
		    repaint();
		    //SimulationRunner sr = new SimulationRunner(s,l);
			//sr.runSimulation();
			//drawChart(sr);

			

		} catch (SimulationException | IOException | AircraftException | PassengerException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
 	}
	
	public void drawChart(SimulationRunner sr) {
		List<Integer> arrayFirst = sr.getFirst();
		List<Integer> arrayBusiness = sr.getBusiness();
		List<Integer> arrayPremium = sr.getPremium();
		List<Integer> arrayEconomy = sr.getEconomy();
		List<Integer> arrayEmpty = sr.getEmpty();
		List<Integer> arrayTotal = sr.getTotal();
		List<Integer> arrayQueue = sr.getQueue();
		List<Integer> arrayRefuse = sr.getRefuse();
		String[] args = null;
		
		Chart.main(args, arrayFirst, arrayBusiness, arrayPremium, arrayEconomy, arrayEmpty, arrayTotal);
		Chart2.main(args, arrayQueue, arrayRefuse);
		
	}

	private static Simulator createSimulatorUsingArgsGUI(String[] args) throws SimulationException{
		int seed = Integer.parseInt(args[0]);
		int maxQueueSize = Integer.parseInt(args[1]);
		double meanBookings = Double.parseDouble(args[2]);
		double sdBookings = Double.parseDouble(args[3]);
		double firstProb = Double.parseDouble(args[4]);
		double businessProb = Double.parseDouble(args[5]);
		double premiumProb = Double.parseDouble(args[6]);
		double economyProb = Double.parseDouble(args[7]);
		double cancelProb = Double.parseDouble(args[8]);
		return new Simulator(seed,maxQueueSize,meanBookings,sdBookings,firstProb,businessProb,
						  premiumProb,economyProb,cancelProb);
	}
	/**
	 * @param args
	 */
	public static void main(String[] args) {
	    JFrame.setDefaultLookAndFeelDecorated(true);
        SwingUtilities.invokeLater(new GUISimulator("BorderLayout"));
        
	}

}
